(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{85:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",function(){return l}),t.d(n,"rightToc",function(){return o}),t.d(n,"default",function(){return c});t(0);var i=t(101);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l={id:"permutation",title:"Permutation"},o=[],b={rightToc:o},p="wrapper";function c(e){var n=e.components,t=r(e,["components"]);return Object(i.b)(p,a({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"You are given a 7 digit phone number, and you should find all possible letter combinations based on the digit-to-letter mapping on numeric pad and return only the ones that have valid match against a given dictionary of words."),Object(i.b)("li",{parentName:"ul"},"Give all possible letter combinations from a phone number."),Object(i.b)("li",{parentName:"ul"},"Generate all subsets of a string."),Object(i.b)("li",{parentName:"ul"},"Print all possible ",Object(i.b)("inlineCode",{parentName:"li"},"N")," pairs of balanced parentheses.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"E.g. when ",Object(i.b)("inlineCode",{parentName:"li"},"N")," is ",Object(i.b)("inlineCode",{parentName:"li"},"2"),", the function should print ",Object(i.b)("inlineCode",{parentName:"li"},"(())")," and ",Object(i.b)("inlineCode",{parentName:"li"},"()()"),"."),Object(i.b)("li",{parentName:"ul"},"E.g. when ",Object(i.b)("inlineCode",{parentName:"li"},"N")," is ",Object(i.b)("inlineCode",{parentName:"li"},"3"),", we should get ",Object(i.b)("inlineCode",{parentName:"li"},"((()))"),", ",Object(i.b)("inlineCode",{parentName:"li"},"(()())"),", ",Object(i.b)("inlineCode",{parentName:"li"},"(())()"),", ",Object(i.b)("inlineCode",{parentName:"li"},"()(())"),", ",Object(i.b)("inlineCode",{parentName:"li"},"()()()"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",a({parentName:"li"},{href:"http://blog.gainlo.co/index.php/2016/12/23/uber-interview-questions-permutations-parentheses/"}),"Source")))),Object(i.b)("li",{parentName:"ul"},"Given a list of arrays, return a list of arrays, where each array is a combination of one element in each given array.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"E.g. If the input is ",Object(i.b)("inlineCode",{parentName:"li"},"[[1, 2, 3], [4], [5, 6]]"),", the output should be ",Object(i.b)("inlineCode",{parentName:"li"},"[[1, 4, 5], [1, 4, 6], [2, 4, 5], [2, 4, 6], [3, 4, 5], [3, 4, 6]]"),".")))))}c.isMDXComponent=!0}}]);