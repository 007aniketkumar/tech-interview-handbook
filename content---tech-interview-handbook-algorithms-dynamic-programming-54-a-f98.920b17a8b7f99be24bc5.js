(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return r}),n.d(t,"rightToc",function(){return c}),n.d(t,"default",function(){return b});n(0);var a=n(101);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r={id:"dynamic-programming",title:"Dynamic Programming"},c=[],p={rightToc:c},l="wrapper";function b(e){var t=e.components,n=o(e,["components"]);return Object(a.b)(l,i({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Given a flight itinerary consisting of starting city, destination city, and ticket price (2D list) - find the optimal price flight path to get from start to destination. (A variation of Dynamic Programming Shortest Path)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Given some coin denominations and a target value ",Object(a.b)("inlineCode",{parentName:"p"},"M"),", return the coins combination with the minimum number of coins."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Time complexity: ",Object(a.b)("inlineCode",{parentName:"li"},"O(MN)"),", where N is the number of distinct type of coins."),Object(a.b)("li",{parentName:"ul"},"Space complexity: ",Object(a.b)("inlineCode",{parentName:"li"},"O(M)"),"."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Given a set of numbers in an array which represent a number of consecutive days of Airbnb reservation requested, as a host, pick the sequence which maximizes the number of days of occupancy, at the same time, leaving at least a 1-day gap in-between bookings for cleaning."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"The problem reduces to finding the maximum sum of non-consecutive array elements.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"E.g."),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",i({parentName:"pre"},{}),"// [5, 1, 1, 5] => 10\nThe above array would represent an example booking period as follows -\n// Dec 1 - 5\n// Dec 5 - 6\n// Dec 6 - 7\n// Dec 7 - 12\n\nThe answer would be to pick Dec 1-5 (5 days) and then pick Dec 7-12 for a total of 10 days of\noccupancy, at the same time, leaving at least 1-day gap for cleaning between reservations.\n\nSimilarly,\n// [3, 6, 4] => 7\n// [4, 10, 3, 1, 5] => 15\n"))))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Given a list of denominations (e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"[1, 2, 5]")," means you have coins worth $1, $2, and \\$5) and a target number ",Object(a.b)("inlineCode",{parentName:"p"},"k"),", find all possible combinations, if any, of coins in the given denominations that add up to ",Object(a.b)("inlineCode",{parentName:"p"},"k"),". You can use coins of the same denomination more than once.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"You are climbing a flight of stairs. It takes n steps to reach to the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? E.g. Input: 3, Output: 3. Explanation: ",Object(a.b)("inlineCode",{parentName:"p"},"[1, 1, 1], [1, 2], [2, 1]"),"."))))}b.isMDXComponent=!0}}]);