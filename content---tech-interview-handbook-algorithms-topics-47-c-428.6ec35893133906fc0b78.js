(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{116:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",function(){return l}),t.d(a,"rightToc",function(){return s}),t.d(a,"default",function(){return h});t(0);var n=t(131);function r(){return(r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l={id:"topics",title:"Topics"},s=[{value:"Arrays",id:"arrays",children:[]},{value:"Strings",id:"strings",children:[]},{value:"Sorting",id:"sorting",children:[]},{value:"Linked Lists",id:"linked-lists",children:[]},{value:"Stacks",id:"stacks",children:[]},{value:"Queues",id:"queues",children:[]},{value:"Hash tables",id:"hash-tables",children:[]},{value:"Trees",id:"trees",children:[]},{value:"Binary Search Trees",id:"binary-search-trees",children:[]},{value:"Heaps / Priority Queues",id:"heaps--priority-queues",children:[]},{value:"Graphs",id:"graphs",children:[]},{value:"Dynamic Programming",id:"dynamic-programming",children:[]},{value:"System Design",id:"system-design",children:[]}],c={rightToc:s},b="wrapper";function h(e){var a=e.components,t=i(e,["components"]);return Object(n.b)(b,r({},c,t,{components:a,mdxType:"MDXLayout"}),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"arrays"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#arrays"}),"#"),"Arrays"),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"strings"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#strings"}),"#"),"Strings"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Prefix trees (Tries)"),Object(n.b)("li",{parentName:"ul"},"Suffix trees"),Object(n.b)("li",{parentName:"ul"},"Suffix arrays"),Object(n.b)("li",{parentName:"ul"},"KMP"),Object(n.b)("li",{parentName:"ul"},"Rabin-Karp"),Object(n.b)("li",{parentName:"ul"},"Boyer-Moore")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"sorting"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#sorting"}),"#"),"Sorting"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Bubble sort"),Object(n.b)("li",{parentName:"ul"},"Insertion sort"),Object(n.b)("li",{parentName:"ul"},"Merge sort"),Object(n.b)("li",{parentName:"ul"},"Quick sort"),Object(n.b)("li",{parentName:"ul"},"Selection sort"),Object(n.b)("li",{parentName:"ul"},"Bucket sort"),Object(n.b)("li",{parentName:"ul"},"Radix sort"),Object(n.b)("li",{parentName:"ul"},"Counting sort")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"linked-lists"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#linked-lists"}),"#"),"Linked Lists"),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"stacks"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#stacks"}),"#"),"Stacks"),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"queues"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#queues"}),"#"),"Queues"),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"hash-tables"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#hash-tables"}),"#"),"Hash tables"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Collision resolution algorithms")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"trees"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#trees"}),"#"),"Trees"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"BFS"),Object(n.b)("li",{parentName:"ul"},"DFS (inorder, postorder, preorder)"),Object(n.b)("li",{parentName:"ul"},"Height")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"binary-search-trees"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#binary-search-trees"}),"#"),"Binary Search Trees"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Insert node"),Object(n.b)("li",{parentName:"ul"},"Delete a node"),Object(n.b)("li",{parentName:"ul"},"Find element in BST"),Object(n.b)("li",{parentName:"ul"},"Find min, max element in BST"),Object(n.b)("li",{parentName:"ul"},"Get successor element in tree"),Object(n.b)("li",{parentName:"ul"},"Check if a binary tree is a BST or not")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"heaps--priority-queues"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#heaps--priority-queues"}),"#"),"Heaps / Priority Queues"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Insert"),Object(n.b)("li",{parentName:"ul"},"Bubble up"),Object(n.b)("li",{parentName:"ul"},"Extract max"),Object(n.b)("li",{parentName:"ul"},"Remove"),Object(n.b)("li",{parentName:"ul"},"Heapify"),Object(n.b)("li",{parentName:"ul"},"Heap sort")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"graphs"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#graphs"}),"#"),"Graphs"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Various implementations",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Adjacency matrix"),Object(n.b)("li",{parentName:"ul"},"Adjacency list"),Object(n.b)("li",{parentName:"ul"},"Adjacency map"))),Object(n.b)("li",{parentName:"ul"},"Single-source shortest path"),Object(n.b)("li",{parentName:"ul"},"Dijkstra"),Object(n.b)("li",{parentName:"ul"},"Bellman-Ford"),Object(n.b)("li",{parentName:"ul"},"Topo sort"),Object(n.b)("li",{parentName:"ul"},"MST"),Object(n.b)("li",{parentName:"ul"},"Prim algorithm"),Object(n.b)("li",{parentName:"ul"},"Kruskal's algorithm"),Object(n.b)("li",{parentName:"ul"},"Union Find Data Structure"),Object(n.b)("li",{parentName:"ul"},"Count connected components in a graph"),Object(n.b)("li",{parentName:"ul"},"List strongly connected components in a graph"),Object(n.b)("li",{parentName:"ul"},"Check for bipartite graph")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"dynamic-programming"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#dynamic-programming"}),"#"),"Dynamic Programming"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Count Change"),Object(n.b)("li",{parentName:"ul"},"0-1 Knapsack")),Object(n.b)("h2",null,Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"system-design"})),Object(n.b)("a",r({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#system-design"}),"#"),"System Design"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"http://www.hiredintech.com/system-design/"}),"http://www.hiredintech.com/system-design/")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023"}),"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/"}),"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://github.com/donnemartin/system-design-primer"}),"https://github.com/donnemartin/system-design-primer")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf"}),"https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf"))))}h.isMDXComponent=!0},131:function(e,a,t){"use strict";t.d(a,"a",function(){return s}),t.d(a,"b",function(){return m});var n=t(0),r=t.n(n),i=r.a.createContext({}),l=function(e){var a=r.a.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):Object.assign({},a,e)),t},s=function(e){var a=l(e.components);return r.a.createElement(i.Provider,{value:a},e.children)},c="mdxType",b={inlineCode:"code",wrapper:function(e){return r.a.createElement(r.a.Fragment,{},e.children)}},h=function(e){var a=e.components,t=e.mdxType,n=e.originalType,i=e.parentName,s=function(e,a){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===a.indexOf(n)&&(t[n]=e[n]);return t}(e,["components","mdxType","originalType","parentName"]),c=l(a);return r.a.createElement(c[i+"."+t]||c[t]||b[t]||n,a?Object.assign({},s,{components:a}):s)};function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=h;var s={};for(var b in a)hasOwnProperty.call(a,b)&&(s[b]=a[b]);s.originalType=e,s[c]="string"==typeof e?e:n,l[1]=s;for(var m=2;m<i;m++)l[m]=t[m];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);