(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{112:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",function(){return l}),t.d(a,"rightToc",function(){return s}),t.d(a,"default",function(){return h});t(0);var r=t(123);function n(){return(n=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l={id:"topics",title:"Topics"},s=[{value:"Arrays",id:"arrays",children:[]},{value:"Strings",id:"strings",children:[]},{value:"Sorting",id:"sorting",children:[]},{value:"Linked Lists",id:"linked-lists",children:[]},{value:"Stacks",id:"stacks",children:[]},{value:"Queues",id:"queues",children:[]},{value:"Hash tables",id:"hash-tables",children:[]},{value:"Trees",id:"trees",children:[]},{value:"Binary Search Trees",id:"binary-search-trees",children:[]},{value:"Heaps / Priority Queues",id:"heaps--priority-queues",children:[]},{value:"Graphs",id:"graphs",children:[]},{value:"Dynamic Programming",id:"dynamic-programming",children:[]},{value:"System Design",id:"system-design",children:[]}],b={rightToc:s},c="wrapper";function h(e){var a=e.components,t=i(e,["components"]);return Object(r.b)(c,n({},b,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"arrays"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#arrays"}),"#"),"Arrays"),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"strings"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#strings"}),"#"),"Strings"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Prefix trees (Tries)"),Object(r.b)("li",{parentName:"ul"},"Suffix trees"),Object(r.b)("li",{parentName:"ul"},"Suffix arrays"),Object(r.b)("li",{parentName:"ul"},"KMP"),Object(r.b)("li",{parentName:"ul"},"Rabin-Karp"),Object(r.b)("li",{parentName:"ul"},"Boyer-Moore")),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"sorting"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#sorting"}),"#"),"Sorting"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Bubble sort"),Object(r.b)("li",{parentName:"ul"},"Insertion sort"),Object(r.b)("li",{parentName:"ul"},"Merge sort"),Object(r.b)("li",{parentName:"ul"},"Quick sort"),Object(r.b)("li",{parentName:"ul"},"Selection sort"),Object(r.b)("li",{parentName:"ul"},"Bucket sort"),Object(r.b)("li",{parentName:"ul"},"Radix sort"),Object(r.b)("li",{parentName:"ul"},"Counting sort")),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"linked-lists"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#linked-lists"}),"#"),"Linked Lists"),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"stacks"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#stacks"}),"#"),"Stacks"),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"queues"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#queues"}),"#"),"Queues"),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"hash-tables"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#hash-tables"}),"#"),"Hash tables"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Collision resolution algorithms")),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"trees"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#trees"}),"#"),"Trees"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"BFS"),Object(r.b)("li",{parentName:"ul"},"DFS (inorder, postorder, preorder)"),Object(r.b)("li",{parentName:"ul"},"Height")),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"binary-search-trees"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#binary-search-trees"}),"#"),"Binary Search Trees"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Insert node"),Object(r.b)("li",{parentName:"ul"},"Delete a node"),Object(r.b)("li",{parentName:"ul"},"Find element in BST"),Object(r.b)("li",{parentName:"ul"},"Find min, max element in BST"),Object(r.b)("li",{parentName:"ul"},"Get successor element in tree"),Object(r.b)("li",{parentName:"ul"},"Check if a binary tree is a BST or not")),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"heaps--priority-queues"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#heaps--priority-queues"}),"#"),"Heaps / Priority Queues"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Insert"),Object(r.b)("li",{parentName:"ul"},"Bubble up"),Object(r.b)("li",{parentName:"ul"},"Extract max"),Object(r.b)("li",{parentName:"ul"},"Remove"),Object(r.b)("li",{parentName:"ul"},"Heapify"),Object(r.b)("li",{parentName:"ul"},"Heap sort")),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"graphs"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#graphs"}),"#"),"Graphs"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Various implementations",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Adjacency matrix"),Object(r.b)("li",{parentName:"ul"},"Adjacency list"),Object(r.b)("li",{parentName:"ul"},"Adjacency map"))),Object(r.b)("li",{parentName:"ul"},"Single-source shortest path"),Object(r.b)("li",{parentName:"ul"},"Dijkstra"),Object(r.b)("li",{parentName:"ul"},"Bellman-Ford"),Object(r.b)("li",{parentName:"ul"},"Topo sort"),Object(r.b)("li",{parentName:"ul"},"MST"),Object(r.b)("li",{parentName:"ul"},"Prim algorithm"),Object(r.b)("li",{parentName:"ul"},"Kruskal's algorithm"),Object(r.b)("li",{parentName:"ul"},"Union Find Data Structure"),Object(r.b)("li",{parentName:"ul"},"Count connected components in a graph"),Object(r.b)("li",{parentName:"ul"},"List strongly connected components in a graph"),Object(r.b)("li",{parentName:"ul"},"Check for bipartite graph")),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"dynamic-programming"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#dynamic-programming"}),"#"),"Dynamic Programming"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Count Change"),Object(r.b)("li",{parentName:"ul"},"0-1 Knapsack")),Object(r.b)("h2",null,Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"system-design"})),Object(r.b)("a",n({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#system-design"}),"#"),"System Design"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"http://www.hiredintech.com/system-design/"}),"http://www.hiredintech.com/system-design/")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023"}),"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/"}),"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"https://github.com/donnemartin/system-design-primer"}),"https://github.com/donnemartin/system-design-primer")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf"}),"https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf"))))}h.isMDXComponent=!0}}]);