(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return l}),n.d(t,"rightToc",function(){return o}),n.d(t,"default",function(){return u});n(0);var a=n(101);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l={id:"interval",title:"Interval"},o=[],b={rightToc:o},c="wrapper";function u(e){var t=e.components,n=i(e,["components"]);return Object(a.b)(c,r({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Given a list of schedules, provide a list of times that are available for a meeting."),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),"[\n  [[4,5], [6,10], [12,14]],\n  [[4,5], [5,9], [13,16]],\n  [[11,14]]\n]\n\nExample Output:\n[[0,4], [11,12], [16,23]]\n"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"You have a number of meetings (with their start and end times). You need to schedule them using the minimum number of rooms. Return the list of meetings in every room.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Interval ranges:"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Given 2 interval ranges, create a function to tell me if these ranges intersect. Both start and end are inclusive: ",Object(a.b)("inlineCode",{parentName:"li"},"[start, end]"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"E.g. ",Object(a.b)("inlineCode",{parentName:"li"},"[1, 4]")," and ",Object(a.b)("inlineCode",{parentName:"li"},"[5, 6]")," => ",Object(a.b)("inlineCode",{parentName:"li"},"false")),Object(a.b)("li",{parentName:"ul"},"E.g. ",Object(a.b)("inlineCode",{parentName:"li"},"[1, 4]")," and ",Object(a.b)("inlineCode",{parentName:"li"},"[3, 6]")," => ",Object(a.b)("inlineCode",{parentName:"li"},"true")))),Object(a.b)("li",{parentName:"ul"},"Given 2 interval ranges that intersect, now create a function to merge the 2 ranges into a single continuous range.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"E.g. ",Object(a.b)("inlineCode",{parentName:"li"},"[1, 4]")," and ",Object(a.b)("inlineCode",{parentName:"li"},"[3, 6]")," => ",Object(a.b)("inlineCode",{parentName:"li"},"[1, 6]")))),Object(a.b)("li",{parentName:"ul"},"Now create a function that takes a group of unsorted, unorganized intervals, merge any intervals that intersect and sort them. The result should be a group of sorted, non-intersecting intervals."),Object(a.b)("li",{parentName:"ul"},"Now create a function to merge a new interval into a group of sorted, non-intersecting intervals. After the merge, all intervals should remain\nnon-intersecting."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Given a list of meeting times, check if any of them overlap. The follow-up question is to return the minimum number of rooms required to accommodate all the meetings."),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"http://blog.gainlo.co/index.php/2016/07/12/meeting-room-scheduling-problem/"}),"Source")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"If you have a list of intervals, how would you merge them?"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"E.g. ",Object(a.b)("inlineCode",{parentName:"li"},"[1, 3], [8, 11], [2, 6]")," => ",Object(a.b)("inlineCode",{parentName:"li"},"[1, 6], [8-11]"))))))}u.isMDXComponent=!0}}]);