(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{65:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",function(){return u}),n.d(e,"rightToc",function(){return i}),n.d(e,"default",function(){return p});n(0);var r=n(101);function o(){return(o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function a(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var u={id:"geometry",title:"Geometry"},i=[],l={rightToc:i},c="wrapper";function p(t){var e=t.components,n=a(t,["components"]);return Object(r.b)(c,o({},l,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"You have a plane with lots of rectangles on it, find out how many of them intersect."),Object(r.b)("li",{parentName:"ul"},"Which data structure would you use to query the k-nearest points of a set on a 2D plane?"),Object(r.b)("li",{parentName:"ul"},"Given many points, find k points that are closest to the origin."),Object(r.b)("li",{parentName:"ul"},"How would you triangulate a polygon?")))}p.isMDXComponent=!0}}]);