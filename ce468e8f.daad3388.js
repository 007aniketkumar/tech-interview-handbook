(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{134:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return o}));var n=a(1),r=a(6),i=(a(0),a(148)),l={id:"topics",title:"Topics"},c={id:"algorithms/topics",title:"Topics",description:"## Arrays",source:"@site/../contents/algorithms/topics.md",permalink:"/tech-interview-handbook/algorithms/topics",editUrl:"https://github.com/yangshun/tech-interview-handbook/edit/master/contents/../contents/algorithms/topics.md",lastUpdatedBy:"Yangshun Tay",lastUpdatedAt:1563155561},s=[{value:"Arrays",id:"arrays",children:[]},{value:"Strings",id:"strings",children:[]},{value:"Sorting",id:"sorting",children:[]},{value:"Linked Lists",id:"linked-lists",children:[]},{value:"Stacks",id:"stacks",children:[]},{value:"Queues",id:"queues",children:[]},{value:"Hash tables",id:"hash-tables",children:[]},{value:"Trees",id:"trees",children:[]},{value:"Binary Search Trees",id:"binary-search-trees",children:[]},{value:"Heaps / Priority Queues",id:"heaps--priority-queues",children:[]},{value:"Graphs",id:"graphs",children:[]},{value:"Dynamic Programming",id:"dynamic-programming",children:[]},{value:"System Design",id:"system-design",children:[]}],b={rightToc:s};function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"arrays"},"Arrays"),Object(i.b)("h2",{id:"strings"},"Strings"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Prefix trees (Tries)"),Object(i.b)("li",{parentName:"ul"},"Suffix trees"),Object(i.b)("li",{parentName:"ul"},"Suffix arrays"),Object(i.b)("li",{parentName:"ul"},"KMP"),Object(i.b)("li",{parentName:"ul"},"Rabin-Karp"),Object(i.b)("li",{parentName:"ul"},"Boyer-Moore")),Object(i.b)("h2",{id:"sorting"},"Sorting"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Bubble sort"),Object(i.b)("li",{parentName:"ul"},"Insertion sort"),Object(i.b)("li",{parentName:"ul"},"Merge sort"),Object(i.b)("li",{parentName:"ul"},"Quick sort"),Object(i.b)("li",{parentName:"ul"},"Selection sort"),Object(i.b)("li",{parentName:"ul"},"Bucket sort"),Object(i.b)("li",{parentName:"ul"},"Radix sort"),Object(i.b)("li",{parentName:"ul"},"Counting sort")),Object(i.b)("h2",{id:"linked-lists"},"Linked Lists"),Object(i.b)("h2",{id:"stacks"},"Stacks"),Object(i.b)("h2",{id:"queues"},"Queues"),Object(i.b)("h2",{id:"hash-tables"},"Hash tables"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Collision resolution algorithms")),Object(i.b)("h2",{id:"trees"},"Trees"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"BFS"),Object(i.b)("li",{parentName:"ul"},"DFS (inorder, postorder, preorder)"),Object(i.b)("li",{parentName:"ul"},"Height")),Object(i.b)("h2",{id:"binary-search-trees"},"Binary Search Trees"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Insert node"),Object(i.b)("li",{parentName:"ul"},"Delete a node"),Object(i.b)("li",{parentName:"ul"},"Find element in BST"),Object(i.b)("li",{parentName:"ul"},"Find min, max element in BST"),Object(i.b)("li",{parentName:"ul"},"Get successor element in tree"),Object(i.b)("li",{parentName:"ul"},"Check if a binary tree is a BST or not")),Object(i.b)("h2",{id:"heaps--priority-queues"},"Heaps / Priority Queues"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Insert"),Object(i.b)("li",{parentName:"ul"},"Bubble up"),Object(i.b)("li",{parentName:"ul"},"Extract max"),Object(i.b)("li",{parentName:"ul"},"Remove"),Object(i.b)("li",{parentName:"ul"},"Heapify"),Object(i.b)("li",{parentName:"ul"},"Heap sort")),Object(i.b)("h2",{id:"graphs"},"Graphs"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Various implementations",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Adjacency matrix"),Object(i.b)("li",{parentName:"ul"},"Adjacency list"),Object(i.b)("li",{parentName:"ul"},"Adjacency map"))),Object(i.b)("li",{parentName:"ul"},"Single-source shortest path"),Object(i.b)("li",{parentName:"ul"},"Dijkstra"),Object(i.b)("li",{parentName:"ul"},"Bellman-Ford"),Object(i.b)("li",{parentName:"ul"},"Topo sort"),Object(i.b)("li",{parentName:"ul"},"MST"),Object(i.b)("li",{parentName:"ul"},"Prim algorithm"),Object(i.b)("li",{parentName:"ul"},"Kruskal's algorithm"),Object(i.b)("li",{parentName:"ul"},"Union Find Data Structure"),Object(i.b)("li",{parentName:"ul"},"Count connected components in a graph"),Object(i.b)("li",{parentName:"ul"},"List strongly connected components in a graph"),Object(i.b)("li",{parentName:"ul"},"Check for bipartite graph")),Object(i.b)("h2",{id:"dynamic-programming"},"Dynamic Programming"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Count Change"),Object(i.b)("li",{parentName:"ul"},"0-1 Knapsack")),Object(i.b)("h2",{id:"system-design"},"System Design"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.hiredintech.com/system-design/"}),"http://www.hiredintech.com/system-design/")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023"}),"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/"}),"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/donnemartin/system-design-primer"}),"https://github.com/donnemartin/system-design-primer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf"}),"https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf"))))}o.isMDXComponent=!0},148:function(e,t,a){"use strict";a.d(t,"a",(function(){return c})),a.d(t,"b",(function(){return o}));var n=a(0),r=a.n(n),i=r.a.createContext({}),l=function(e){var t=r.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):Object.assign({},t,e)),a},c=function(e){var t=l(e.components);return r.a.createElement(i.Provider,{value:t},e.children)};var s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,b=function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(a[n]=e[n]);return a}(e,["components","mdxType","originalType","parentName"]),o=l(a),u=n,p=o[c+"."+u]||o[u]||s[u]||i;return a?r.a.createElement(p,Object.assign({},{ref:t},b,{components:a})):r.a.createElement(p,Object.assign({},{ref:t},b))}));function o(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var o=2;o<i;o++)l[o]=a[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);