(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{106:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return s}),n.d(t,"rightToc",function(){return i}),n.d(t,"default",function(){return u});n(0);var a=n(123);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s={id:"recursion",title:"Recursion"},i=[{value:"Notes",id:"notes",children:[]},{value:"Recommended Leetcode questions",id:"recommended-leetcode-questions",children:[]}],c={rightToc:i},l="wrapper";function u(e){var t=e.components,n=r(e,["components"]);return Object(a.b)(l,o({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",null,Object(a.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"notes"})),Object(a.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#notes"}),"#"),"Notes"),Object(a.b)("p",null,"Recursion is useful for permutation, because it generates all combinations and tree-based questions. You should know how to generate all permutations of a sequence as well as how to handle duplicates."),Object(a.b)("p",null,"Remember to always define a base case so that your recursion will end."),Object(a.b)("p",null,"Recursion implicitly uses a stack. Hence all recursive approaches can be rewritten iteratively using a stack. Beware of cases where the recursion level goes too deep and causes a stack overflow (the default limit in Python is 1000). You may get bonus points for pointing this out to the interviewer. Recursion will never be O(1) space complexity because a stack is involved, unless there is ",Object(a.b)("a",o({parentName:"p"},{href:"https://stackoverflow.com/questions/310974/what-is-tail-call-optimization"}),"tail-call optimization")," (TCO). Find out if your chosen language supports TCO."),Object(a.b)("h2",null,Object(a.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"recommended-leetcode-questions"})),Object(a.b)("a",o({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#recommended-leetcode-questions"}),"#"),"Recommended Leetcode questions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",o({parentName:"li"},{href:"https://leetcode.com/problems/subsets/"}),"Subsets")," and ",Object(a.b)("a",o({parentName:"li"},{href:"https://leetcode.com/problems/subsets-ii/"}),"Subsets II")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",o({parentName:"li"},{href:"https://leetcode.com/problems/strobogrammatic-number-ii/"}),"Strobogrammatic Number II (Leetcode Premium)"))))}u.isMDXComponent=!0}}]);